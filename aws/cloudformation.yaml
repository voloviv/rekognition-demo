Description: >
    Autohost App Stack - deploys CD Pipeline, Containers, Route53, CloudFront and other resources

Parameters:
    WebsiteServiceSize:
        Description: How many web containers to initially run?
        Type: Number
        Default: 1

    ApiSecretKey:
        Description: Private key for signing secure tokens
        Type: String
        NoEcho: true

    ApexDomain:
        Description: Base domain for the website
        Type: String

    DockerImageName:
        Description: "Docker image name"
        Type: String
        Default: "voloviv"

    DockerImageTag:
        Description: "Docker image tag"
        Type: String
        Default: "latest"

    BranchName:
        Description: "Git branch to build from"
        Type: String
        Default: "master"

    StageName:
        Description: "Environment name"
        Type: String
        Default: "dev"


Resources:

    # S3
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "voloviv-reg-uploads-22"
    CharactersBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "voloviv-got-characters-22"

    #
    # Security Groups
    #

    # This security group defines who/where is allowed to access the ECS hosts directly.
    # By default we're just allowing access from the load balancer.  If you want to SSH
    # into the hosts, or expose non-load balanced services you can open their ports here.
    FargateContainerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "VPC" ]]}
            GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
            SecurityGroupIngress:
                # Only allow inbound access to ECS from the ELB
                - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
                  IpProtocol: -1
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-Fargate-Containers

    EcsSecurityGroupIngressFromSelf:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Ingress from other containers in the same security group
            GroupId: !Ref 'FargateContainerSecurityGroup'
            IpProtocol: -1
            SourceSecurityGroupId: !Ref FargateContainerSecurityGroup

    # This security group defines who/where is allowed to access the Application Load Balancer.
    # By default, we've opened this up to the public internet (0.0.0.0/0) but can you restrict
    # it further if you want.
    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "VPC" ]]}
            GroupDescription: Access to the load balancer that sits in front of ECS
            SecurityGroupIngress:
                # Allow access from anywhere to our ECS services
                - CidrIp: 0.0.0.0/0
                  IpProtocol: -1
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-LoadBalancers

    #
    # ALB(s)
    #
    LoadBalancerWeb:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub ${AWS::StackName}-web
            Scheme: internet-facing
            Subnets:
                - {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet1" ]]}
                - {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet2" ]]}
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-web
    LoadBalancerWebListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancerWeb
            Port: 80
            Protocol: HTTP
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref DefaultTargetGroupWeb

    # We define a default target group here, as this is a mandatory Parameters
    # when creating an Application Load Balancer Listener. This is not used, instead
    # a target group is created per-service
    DefaultTargetGroupWeb:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub ${AWS::StackName}-webdummy
            VpcId: {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "VPC" ]]}
            Port: 80
            Protocol: HTTP


    # Roles
    TaskExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${AWS::StackName}-task-exec-role-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ecs-tasks.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-task-exec-policy-1-${AWS::Region}
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:CreateLogGroup",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetRepositoryPolicy",
                                "ecr:BatchGetImage"
                            ],
                            "Resource": "*"
                        }]
                    }

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${AWS::StackName}-task-role-${AWS::Region}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ecs-tasks.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-task-policy-1-${AWS::Region}
                  PolicyDocument:
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:CreateTable",
                                "dynamodb:Query",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:Scan",
                                "dynamodb:GetItem",
                                "s3:*",
                                "sns:Publish",
                                "es:*",
                                "rekognition:*"
                            ],
                            "Resource": "*"
                        }]
                    }

    #
    # ECS
    #
    ECSCluster:
        Type: AWS::ECS::Cluster

    #
    # ECS Web Services
    #
    WebService:
        Type: AWS::ECS::Service
        DependsOn:
            - ListenerRuleWeb
#            - ListenerRuleWebSecure
        Properties:
            LaunchType: FARGATE
            Cluster: !Ref ECSCluster
            #Role: !Ref ServiceRole
            DesiredCount: !Ref WebsiteServiceSize
            TaskDefinition: !Ref WebTaskDefinition
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref FargateContainerSecurityGroup
                    Subnets:
                        - {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet1" ]]}
                        - {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet2" ]]}
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 75
            LoadBalancers:
                - ContainerName: "voloviv"
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroupWeb

    WebTaskDefinition:
        Type: AWS::ECS::TaskDefinition
        DependsOn:
            - LoadBalancerWeb
        Properties:
            ExecutionRoleArn: !Ref TaskExecutionRole
            TaskRoleArn: !Ref TaskRole
            NetworkMode: awsvpc
            Memory: 1024
            Cpu: 512
            RequiresCompatibilities:
                - FARGATE
            ContainerDefinitions:
                - Name: voloviv
                  Essential: true
                  Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerImageName}:${DockerImageTag}
                  Memory: 1024
                  Cpu: 512
#                  WorkingDirectory: "/usr/local/app"
#                  Command:
#                      - "start-prod"
                  Environment:
                      - Name: AWS_REGION
                        Value: !Ref AWS::Region
                      - Name: NODE_ENV
                        Value: production
                      - Name: JWT_SECRET_KEY
                        Value: !Ref ApiSecretKey
                      - Name: BASE_URL
                        Value: !Sub https://${ApexDomain}
                      - Name: APIHOST
                        Value: !GetAtt LoadBalancerWeb.DNSName
                      - Name: APIPORT
                        Value: 3030
                      - Name: HOST
                        Value: !GetAtt LoadBalancerWeb.DNSName
                      - Name: PORT
                        Value: 80
                      - Name: SESSION_CACHE_TABLE
                        Value: !Sub ${AWS::StackName}-session-cache
                  PortMappings:
                      - ContainerPort: 80
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: 'autohost-web'

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroupWeb:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        DependsOn: LoadBalancerWeb
        Properties:
            Name: !Sub ${AWS::StackName}-web
            VpcId: {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "VPC" ]]}
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 30
            HealthyThresholdCount: 2
            TargetType: ip
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: '30'
    ListenerRuleWeb:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref LoadBalancerWebListener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                    - "/*"
            Actions:
                - TargetGroupArn: !Ref TargetGroupWeb
                  Type: forward


    # Route 53
    DNS:
        Type: AWS::Route53::RecordSetGroup
        Properties:
            HostedZoneName: !Sub ${ApexDomain}.
            RecordSets:
                - Name: !Sub ${ApexDomain}
                  Type: A
                  AliasTarget:
                    HostedZoneId: !GetAtt LoadBalancerWeb.CanonicalHostedZoneID
                    DNSName: !GetAtt LoadBalancerWeb.DNSName
#                - Name: !Sub api.${ApexDomain}
#                  Type: A
#                  AliasTarget:
#                    HostedZoneId: !GetAtt LoadBalancerApi.CanonicalHostedZoneID
#                    DNSName: !GetAtt LoadBalancerApi.DNSName



    # Deployment Automation
#    DeployWebsiteRole:
#      Type: AWS::IAM::Role
#      Properties:
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            Effect: Allow
#            Principal:
#              Service: codebuild.amazonaws.com
#            Action: sts:AssumeRole
#        Policies:
#          - PolicyName: root
#            PolicyDocument:
#              Version: 2012-10-17
#              Statement:
#                - Resource: "*"
#                  Effect: Allow
#                  Action:
#                    - logs:CreateLogGroup
#                    - logs:CreateLogStream
#                    - logs:PutLogEvents
#                    - ecr:GetAuthorizationToken
#                - Resource:
#                    - !Sub arn:aws:s3:::${PipelineArtifactStoreBucket}/*
#                    - !Sub arn:aws:s3:::${PipelineDeployTriggerBucket}/*
#                  Effect: Allow
#                  Action:
#                    - s3:GetObject
#                    - s3:PutObject
#                    - s3:GetObjectVersion
#                - Resource:
#                    - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${DockerImageName}
#                  Effect: Allow
#                  Action:
#                    - "ecr:*"
#
#    PipelineRole:
#      Type: AWS::IAM::Role
#      Properties:
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            Effect: Allow
#            Principal:
#              Service: codepipeline.amazonaws.com
#            Action: sts:AssumeRole
#        Path: /
#        Policies:
#          - PolicyName: root
#            PolicyDocument:
#              Version: 2012-10-17
#              Statement:
#                - Resource:
#                    - !Sub arn:aws:s3:::${PipelineArtifactStoreBucket}/*
#                    - !Sub arn:aws:s3:::${PipelineArtifactStoreBucket}
#                    - !Sub arn:aws:s3:::${PipelineDeployTriggerBucket}/*
#                    - !Sub arn:aws:s3:::${PipelineDeployTriggerBucket}
#                  Effect: Allow
#                  Action:
#                    - s3:PutObject
#                    - s3:GetObject
#                    - s3:GetObjectVersion
#                    - s3:GetBucketVersioning
#                - Resource: "*"
#                  Effect: Allow
#                  Action:
#                    - ecs:DescribeServices
#                    - ecs:DescribeTaskDefinition
#                    - ecs:DescribeTasks
#                    - ecs:ListTasks
#                    - ecs:RegisterTaskDefinition
#                    - ecs:UpdateService
#                    - codebuild:StartBuild
#                    - codebuild:BatchGetBuilds
#                    - iam:PassRole
#
#
#    PipelineDeployTriggerBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        AccessControl: BucketOwnerFullControl
#        VersioningConfiguration:
#          Status: Enabled
#
#    PipelineArtifactStoreBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        AccessControl: BucketOwnerFullControl
#
#    Pipeline:
#      Type: AWS::CodePipeline::Pipeline
#      Properties:
#        RoleArn: !GetAtt PipelineRole.Arn
#        ArtifactStore:
#          Location:
#            Ref:
#              PipelineArtifactStoreBucket
#          Type: S3
#        Stages:
#          - Name: Source
#            Actions:
#              - Name: SourceAction
#                ActionTypeId:
#                  Category: Source
#                  Owner: AWS
#                  Version: 1
#                  Provider: S3
#                InputArtifacts: []
#                OutputArtifacts:
#                  - Name: SourceOutput
#                Configuration:
#                  S3Bucket: !Ref PipelineDeployTriggerBucket
#                  S3ObjectKey: !Sub ${BranchName}.zip
#                RunOrder: 1
#          - Name: BuildApp
#            Actions:
#            - Name: BuildAppAction
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Version: 1
#                Provider: CodeBuild
#              InputArtifacts:
#                - Name: SourceOutput
#              OutputArtifacts:
#                - Name: BuildAppActionOutput
#              Configuration:
#                ProjectName:
#                  Ref: AppContainerBuild
#              RunOrder: 2
#          - Name: DeployApiContainer
#            Actions:
#            - Name: DeployApiContainerAction
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: ECS
#              InputArtifacts:
#                - Name: BuildAppActionOutput
#              Configuration:
#                ClusterName: !Ref ECSCluster
#                ServiceName: !GetAtt ApiService.Name
#                FileName: api.json
#              RunOrder: 3
#          - Name: DeployWebContainer
#            Actions:
#            - Name: DeployWebContainerAction
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: ECS
#              InputArtifacts:
#                - Name: BuildAppActionOutput
#              Configuration:
#                ClusterName: !Ref ECSCluster
#                ServiceName: !GetAtt WebService.Name
#                FileName: web.json
#              RunOrder: 4
#
#    AppContainerBuild:
#      Type: AWS::CodeBuild::Project
#      Properties:
#        Artifacts:
#          Type: CODEPIPELINE
#        Environment:
#          ComputeType: BUILD_GENERAL1_SMALL
#          Image: aws/codebuild/docker:17.09.0
#          Type: LINUX_CONTAINER
#          EnvironmentVariables:
#            - Name: DOCKER_TAG
#              Value: !Ref DockerImageTag
#            - Name: DOCKER_IMAGE_NAME
#              Value: !Ref DockerImageName
#            - Name: AWS_ACCOUNT_ID
#              Value: !Ref AWS::AccountId
#            - Name: REPOSITORY_URI
#              Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerImageName}
#        Name: !Sub AppContainerBuild-${StageName}
#        ServiceRole: !Ref DeployWebsiteRole
#        Source:
#          Type: CODEPIPELINE
#          BuildSpec: !Sub |
#            version: 0.2
#            phases:
#              install:
#                commands:
#                  - cd app/
#                  - IMAGE_URI="$REPOSITORY_URI:$DOCKER_TAG"
#              build:
#                commands:
#                  - docker build -t autohost:${DockerImageTag} .
#              post_build:
#                commands:
#                  - $(aws ecr get-login --no-include-email --region ${AWS::Region})
#                  - docker tag autohost:${DockerImageTag} $IMAGE_URI
#                  - docker push $IMAGE_URI
#                  - printf '[{"name":"autohost-web","imageUri":"%s"}]' "$IMAGE_URI" > $CODEBUILD_SRC_DIR/web.json
#                  - printf '[{"name":"autohost-api","imageUri":"%s"}]' "$IMAGE_URI" > $CODEBUILD_SRC_DIR/api.json
#                  - printf '[{"name":"autohost-api","imageUri":"%s"},{"name":"autohost-web","imageUri":"%s"}]' "$IMAGE_URI" > $CODEBUILD_SRC_DIR/images.json
#            artifacts:
#              files:
#                - web.json
#                - api.json
#                - images.json

Outputs:

    #
    # VPC Resources
    #
    VPC:
            Description: A reference to the created VPC
            Value: {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "VPC" ]]}

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet1" ]]}, {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet2" ]]} ]]

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet1" ]]}

    PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: {"Fn::ImportValue" : !Join [ "-", [ "voloviv-resources", !Ref StageName, "PublicSubnet2" ]]}

    #
    # Security Groups
    #
    FargateContainerSecurityGroup:
        Description: A reference to the security group for ECS hosts
        Value: !Ref FargateContainerSecurityGroup

    LoadBalancerSecurityGroup:
        Description: A reference to the security group for load balancers
        Value: !Ref LoadBalancerSecurityGroup

    #
    # ALB
    #
    LoadBalancerWeb:
        Description: A reference to the Application Load Balancer
        Value: !Ref LoadBalancerWeb

    LoadBalancerWebUrl:
        Description: The URL of the ALB
        Value: !GetAtt LoadBalancerWeb.DNSName

    ListenerWeb:
        Description: A reference to a port 80 listener
        Value: !Ref LoadBalancerWebListener

    #
    # ECS
    #
    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

    # S3 Buckets
    CharactersBucket:
      Description: S3 Bucket
      Value:
        Ref: CharactersBucket
      Export:
        Name: CharactersBucket
    UploadsBucket:
      Description: S3 Bucket
      Value:
        Ref: UploadsBucket
      Export:
        Name: UploadsBucket

#    PipelineDeployTriggerBucket:
#        Description: S3 bucket to trigger app container build and deploy process
#        Value: !Ref PipelineDeployTriggerBucket
